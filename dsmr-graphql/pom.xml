<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Dutch Smart Meter Requirements (DSMR) Toolkit
  ~ Copyright (C) 2019-2024 Niels Basjes
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     https://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  ~
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>nl.basjes.dsmr</groupId>
    <artifactId>dsmr-parser-parent</artifactId>
    <version>0.7-SNAPSHOT</version>
  </parent>

  <artifactId>dsmr-graphql</artifactId>
  <packaging>jar</packaging>
  <name>DSMR : Serve with GraphQL</name>
  <description>A toolkit for reading and parsing the data conforming to the Dutch Smart Meter Requirements (DSMR).</description>
  <url>https://dsmr.basjes.nl</url>

  <properties>
    <java.version>17</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.release>${java.version}</maven.compiler.release>
    <main.class>nl.basjes.dsmr.service.DSMRService</main.class>
    <spring-boot.version>3.4.1</spring-boot.version>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-dependencies</artifactId>
        <version>${spring-boot.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
      <version>2.8.1</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>nl.basjes.dsmr</groupId>
      <artifactId>dsmr-parser</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>args4j</groupId>
      <artifactId>args4j</artifactId>
      <version>2.37</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-graphql</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.yaml</groupId>
          <artifactId>snakeyaml</artifactId>
        </exclusion>
        <exclusion>
          <groupId>com.graphql-java</groupId>
          <artifactId>graphql-java</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.yaml</groupId>
      <artifactId>snakeyaml</artifactId>
      <version>2.3</version>
    </dependency>

    <dependency>
      <groupId>com.graphql-java</groupId>
      <artifactId>graphql-java</artifactId>
      <version>22.3</version>
    </dependency>

    <dependency>
      <groupId>com.graphql-java</groupId>
      <artifactId>graphql-java-extended-scalars</artifactId>
      <version>22.0</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-websocket</artifactId>
    </dependency>

    <dependency>
      <groupId>com.graphql-java</groupId>
      <artifactId>graphiql-spring-boot-starter</artifactId>
      <version>5.0.2</version>
      <exclusions>
        <exclusion>
          <groupId>com.graphql-java</groupId>
          <artifactId>graphql-java</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.apache.commons</groupId>
          <artifactId>commons-text</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
<!--      <exclusions>-->
<!--        <exclusion>-->
<!--          <groupId>org.slf4j</groupId>-->
<!--          <artifactId>slf4j-api</artifactId>-->
<!--        </exclusion>-->
<!--        <exclusion>-->
<!--          <groupId>org.springframework</groupId>-->
<!--          <artifactId>spring-webmvc</artifactId>-->
<!--        </exclusion>-->
<!--        <exclusion>-->
<!--          <groupId>org.springframework.boot</groupId>-->
<!--          <artifactId>spring-boot-autoconfigure</artifactId>-->
<!--        </exclusion>-->
<!--        <exclusion>-->
<!--          <groupId>org.apache.commons</groupId>-->
<!--          <artifactId>commons-lang3</artifactId>-->
<!--        </exclusion>-->
<!--        <exclusion>-->
<!--          <groupId>org.yaml</groupId>-->
<!--          <artifactId>snakeyaml</artifactId>-->
<!--        </exclusion>-->
<!--      </exclusions>-->
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.36</version>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.jetbrains</groupId>
      <artifactId>annotations</artifactId>
      <version>26.0.1</version>
    </dependency>


    <dependency>
      <groupId>org.junit.vintage</groupId>
      <artifactId>junit-vintage-engine</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <version>${spring-boot.version}</version>
      <scope>test</scope>
      <exclusions>
        <exclusion>
          <groupId>junit</groupId>
          <artifactId>junit</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>5.5.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-toolchains-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>select-jdk-toolchain</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <toolchains>
            <jdk>
              <version>[21,22)</version>
            </jdk>
          </toolchains>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <compilerArgs>
            <!-- Enable almost all warnings.-->
            <!-- Ignore 'processing' to avoid "No processor claimed any of these annotations" in several places. -->
            <!-- Ignore 'serial' warnings about not having a serialVersionUID -->
            <!-- Ignore 'options' warnings about java 8 being obsolete in JDK 21 -->
            <arg>-Xlint:all,-processing,-serial,-options</arg>
            <arg>-Werror</arg>
          </compilerArgs>
          <showWarnings>true</showWarnings>
          <showDeprecation>true</showDeprecation>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${spring-boot.version}</version>
        <configuration>
          <mainClass>${main.class}</mainClass>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-enforcer-plugin</artifactId>
        <executions>
          <execution>
            <id>dependency-convergence</id>
            <phase>none</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>
                <dependencyConvergence/>
              </rules>
              <skip>true</skip>
            </configuration>
          </execution>

          <execution>
            <id>enforce-quality</id>
            <phase>validate</phase>
            <goals>
              <goal>enforce</goal>
            </goals>
            <configuration>
              <rules>

                <banDuplicateClasses>
                  <scopes>
                    <scope>compile</scope>
                    <scope>runtime</scope>
                    <scope>provided</scope>
                  </scopes>
                  <findAllDuplicates>true</findAllDuplicates>
                  <ignoreWhenIdentical>true</ignoreWhenIdentical>
                </banDuplicateClasses>

              </rules>
              <fail>true</fail>
            </configuration>
          </execution>

        </executions>
        <dependencies>
          <dependency>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>extra-enforcer-rules</artifactId>
            <version>1.9.0</version>
          </dependency>
        </dependencies>
      </plugin>


<!--      &lt;!&ndash; Documentation: https://dmp.fabric8.io/ &ndash;&gt;-->
<!--      <plugin>-->
<!--        <groupId>io.fabric8</groupId>-->
<!--        <artifactId>docker-maven-plugin</artifactId>-->
<!--        <version>${docker-maven-plugin.version}</version>-->

<!--        <configuration>-->
<!--          <skip>${docker-based-tests.skip}</skip>-->
<!--          <follow>false</follow>-->
<!--          <sourceDirectory>src/test/resources</sourceDirectory>-->
<!--          <images>-->
<!--            <image>-->
<!--              <name>nielsbasjes/yauaa:${project.version}</name>-->
<!--              <build>-->
<!--                <maintainer>Niels Basjes</maintainer>-->
<!--                <from>openjdk:21-slim</from>-->
<!--                <tags>-->
<!--                  <tag>latest</tag>-->
<!--                  <tag>${project.version}</tag>-->
<!--                </tags>-->

<!--                <labels>-->
<!--                  <name>yauaa</name>-->
<!--                  <org.opencontainers.image.created>${maven.build.timestamp}</org.opencontainers.image.created>-->
<!--                  <org.opencontainers.image.authors>Niels Basjes</org.opencontainers.image.authors>-->
<!--                  <org.opencontainers.image.url>https://yauaa.basjes.nl</org.opencontainers.image.url>-->
<!--                  <org.opencontainers.image.documentation>https://yauaa.basjes.nl</org.opencontainers.image.documentation>-->
<!--                  <org.opencontainers.image.source>https://github.com/nielsbasjes/yauaa</org.opencontainers.image.source>-->
<!--                  <org.opencontainers.image.version>${project.version}</org.opencontainers.image.version>-->
<!--                  &lt;!&ndash;suppress UnresolvedMavenProperty &ndash;&gt;-->
<!--                  <org.opencontainers.image.revision>${git.commit.id}</org.opencontainers.image.revision>-->
<!--                  <org.opencontainers.image.vendor>Niels Basjes</org.opencontainers.image.vendor>-->
<!--                  <org.opencontainers.image.licenses>Apache-2.0</org.opencontainers.image.licenses>-->
<!--                  <org.opencontainers.image.title>Yauaa: Yet Another UserAgent Analyzer</org.opencontainers.image.title>-->
<!--                  <org.opencontainers.image.description>This is a java library that tries to parse and analyze the useragent string (and when available the User-Agent Client Hints) and extract as many relevant attributes as possible.</org.opencontainers.image.description>-->
<!--                </labels>-->
<!--                <assembly>-->
<!--                  <name>${project.build.finalName}.war</name>-->
<!--                  <targetDir>/</targetDir>-->
<!--                  <mode>dir</mode>-->
<!--                  <descriptorRef>artifact</descriptorRef>-->
<!--                </assembly>-->
<!--                <ports>-->
<!--                  <port>8080</port>-->
<!--                </ports>-->
<!--                <entryPoint>-->
<!--                  <exec>-->
<!--                    <arg>java</arg>-->
<!--                    <arg>-Djava.security.egd=file:/dev/./urandom</arg>-->
<!--                    <arg>-jar</arg>-->
<!--                    <arg>/${project.build.finalName}.war</arg>-->
<!--                  </exec>-->
<!--                </entryPoint>-->
<!--              </build>-->

<!--              <run>-->
<!--                <skip>true</skip>-->
<!--              </run>-->
<!--            </image>-->

<!--            <image>-->
<!--              <name>nielsbasjes/yauaa:${project.version}-WITH-EXTRA-CONFIG</name>-->
<!--              <build>-->
<!--                <tags>-->
<!--                  <tag>${project.version}-WITH-EXTRA-CONFIG</tag>-->
<!--                </tags>-->
<!--                <dockerFile>ITDockerfile</dockerFile>-->
<!--              </build>-->

<!--              <run>-->
<!--                <containerNamePattern>yauaa-ittest-%i</containerNamePattern>-->
<!--                <ports>-->
<!--                  <port>yauaa.port:8080</port>-->
<!--                </ports>-->
<!--                <wait>-->
<!--                  <http>-->
<!--                    <url>http://localhost:${yauaa.port}/readiness</url>-->
<!--                  </http>-->
<!--                  <time>20000</time>-->
<!--                </wait>-->
<!--                <log>-->
<!--                  <prefix>[ LOCAL TEST OF YAUAA WITH CONFIG ]::</prefix>-->
<!--                  <color>yellow</color>-->
<!--                </log>-->
<!--              </run>-->
<!--            </image>-->

<!--          </images>-->
<!--        </configuration>-->

<!--        <executions>-->
<!--          <execution>-->
<!--            <id>build-docker</id>-->
<!--            <configuration>-->
<!--              <skip>${docker-based-tests.skip}</skip>-->
<!--              <removeMode>build</removeMode>-->
<!--            </configuration>-->
<!--            <phase>${docker-based-package.phase}</phase>-->
<!--            <goals>-->
<!--              <goal>stop</goal>-->
<!--              <goal>remove</goal>-->
<!--              <goal>build</goal>-->
<!--            </goals>-->
<!--          </execution>-->

<!--          <execution>-->
<!--            <id>start-docker-before-it</id>-->
<!--            <phase>pre-integration-test</phase>-->
<!--            <configuration>-->
<!--              <skip>${docker-based-tests.skip}</skip>-->
<!--            </configuration>-->
<!--            <goals>-->
<!--              <goal>stop</goal>-->
<!--              <goal>start</goal>-->
<!--            </goals>-->
<!--          </execution>-->

<!--          <execution>-->
<!--            <id>stop-docker-after-it</id>-->
<!--            <configuration>-->
<!--              <skip>${docker-based-tests.skip}</skip>-->
<!--            </configuration>-->
<!--            <phase>post-integration-test</phase>-->
<!--            <goals>-->
<!--              <goal>stop</goal>-->
<!--            </goals>-->
<!--          </execution>-->

<!--        </executions>-->
<!--      </plugin>-->

<!--      <plugin>-->
<!--        <groupId>org.apache.maven.plugins</groupId>-->
<!--        <artifactId>maven-failsafe-plugin</artifactId>-->
<!--        <executions>-->
<!--          <execution>-->
<!--            <id>run-tests</id>-->
<!--            <configuration>-->
<!--              <skip>${docker-based-tests.skip}</skip>-->
<!--            </configuration>-->
<!--            <phase>integration-test</phase>-->
<!--            <goals>-->
<!--              <goal>integration-test</goal>-->
<!--              <goal>verify</goal>-->
<!--            </goals>-->
<!--          </execution>-->
<!--        </executions>-->
<!--      </plugin>-->

    </plugins>
  </build>

  <licenses>
    <license>
      <name>Apache License, Version 2.0</name>
      <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <developers>
    <developer>
      <name>Niels Basjes</name>
      <email>niels@basjes.nl</email>
      <roles>
        <role>Architect</role>
        <role>Developer</role>
      </roles>
      <timezone>Europe/Amsterdam</timezone>
    </developer>
  </developers>

  <scm>
    <url>https://dsmr.basjes.nl</url>
    <connection>scm:git:https://github.com/nielsbasjes/dsmr-tools.git</connection>
    <developerConnection>scm:git:.</developerConnection>
  </scm>

</project>
